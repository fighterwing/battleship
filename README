==============
** SYNOPSIS **
==============
1: This is a text-based battleship game. Each player is given a fleet of boats that must be placed
   on a map. Once the boats are placed, the players will take turns attacking each other by selecting
   a square on the map. Hits, misses, and Two commanders , a judge, a map, and a unit. The
   that handles the map and game cycle. The commanders take turns attacking each other by selecting
   a tile on the map via text. Once the opposing commanders fleet is destroyed: victory, otherwise,
   he loses.

================
** GAME FLOW **
================
1: A judge will be created and he will start the initialize cycle.

2: The initialize cycle will involve these actions:

       A: The player will place his ships
       B: The CPU will place his ships
       C: The play cycle will start

       extra: A map and fleet size could be selected

4: The play cycle will involve these actions:

       A: The map is drawn
       B: Player takes turn
       C: CPU takes turn
       D: Attack is checked, win/lose is checked
       
       extra: A "near miss" check will be reported if a commander attacks an adjacent tile.

============
** LAYOUT **
============

  ================
  * HIERARCHY #1 *
  ================
    In this hierarchy, the logic functions for each game variable/object are contained within
    their own source files (ex: commander attack function in commander.c, unit place_ship function in unit.c).

	1: Commander.c - commander, attack logic
	2: Judge.c - judge, init cycle, play cycle
        3: Unit.c - ship, fleet, place ship logic
	4: Canvas.c - tile, map, drawing logic

   =======================================
   * HIERARCHY #2 (Currently Considered) *
   =======================================
    In this hierarchy, logic functions have their own source files, and game variables/objects are bundled
    into an "entities" source file (ex: comat logic is in combat.c, commander/ships/judge are in entities.c).

	1: Entities.c - commander, judge, unit, map
	2: Cycles.c - init cycle, play cycle
	3: Combat.c - place ship logic, attack logic,
	4: Canvas.c - drawing logic

        ===============
        - DESCRIPTION -
	===============
        Entities.c: This file contains variables and structs for the objects of the game.
                    Commander, Unit, Map and Judge are declared. The logic that their data uses is stored in another file.

        Cycles.c, Combat.c, Canvas.c: These files contain the logic functions for the game.
                                      Example: The cycles.c contains the init and play functions of the game.
